{"version":3,"sources":["components/NavBar.js","components/SearchBar.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","class","href","src","alt","id","SearchBar","placeholder","onFocus","e","target","onBlur","React","Component","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUA2CeA,G,YAxCA,WACb,OACE,6BACE,yBAAKC,UAAU,+CACb,4BACEA,UAAU,iBACVC,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMC,MAAM,yBAEd,uBAAGP,UAAU,eAAeQ,KAAK,KAC/B,yBACEC,IAAI,sEACJC,IAAI,MAIR,yBAAKH,MAAM,2BAA2BI,GAAG,uBACvC,wBAAIJ,MAAM,mCACR,wBAAIA,MAAM,mBACR,uBAAGA,MAAM,WAAWC,KAAK,KACvB,yBACEC,IAAI,mEACJT,UAAU,iBACVU,IAAI,aCVPE,G,6KAjBX,OACE,yBAAKZ,UAAU,wCACb,0BAAMA,UAAU,sCACd,2BACEA,UAAU,4CACVC,KAAK,SACLY,YAAY,4BACZP,aAAW,SACXQ,QAAS,SAACC,GAAD,OAAQA,EAAEC,OAAOH,YAAc,IACxCI,OAAQ,SAACF,GAAD,OAAQA,EAAEC,OAAOH,YAAc,qC,GAX3BK,IAAMC,YCefC,G,6KAbX,OACE,yBAAKpB,UAAU,mBACb,yBAAKO,MAAM,6BACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,YACA,uBAAGA,MAAM,QAAT,4C,GAPQW,IAAMC,YCwBXE,E,uKAVX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUH,IAAMC,WCHJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db02d51b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\n\nconst navbar = () => {\n  return (\n    <div>\n      <nav className=\"navbar w-100 navbar-expand-lg navbar-light \">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarTogglerDemo03\"\n          aria-controls=\"navbarTogglerDemo03\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <a className=\"navbar-brand\" href=\"#\">\n          <img\n            src=\"https://img.icons8.com/pastel-glyph/64/000000/open-envelope--v2.png\"\n            alt=\"\"\n          ></img>\n        </a>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo03\">\n          <ul class=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#\">\n                <img\n                  src=\"https://img.icons8.com/pastel-glyph/128/000000/user-male--v1.png\"\n                  className=\"rounded-circle\"\n                  alt=\"\"\n                ></img>\n                {/* User <span class=\"sr-only\">(current)</span> */}\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\nexport default navbar;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component {\n  render() {\n    return (\n      <div className=\"searchbar d-flex align-items-center \">\n        <form className=\"form-inline justify-content-center\">\n          <input\n            className=\"w-75 form-control form-control-lg mr-sm-2\"\n            type=\"search\"\n            placeholder=\"Job Title, Location, etc.\"\n            aria-label=\"Search\"\n            onFocus={(e) => (e.target.placeholder = \"\")}\n            onBlur={(e) => (e.target.placeholder = \"Job Title, Location, etc.\")}\n          ></input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Title.css\";\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"title-container\">\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-4\">H1-Board</h1>\n            <p class=\"lead\">US job postings for Non-Residents</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/NavBar\";\nimport SearchBar from \"./components/SearchBar\";\nimport Title from \"./components/Title\";\n\n// function App() {\n//   return (\n//     <div class=\"container-fluid\">\n//       <Navbar />\n//       <searchBar />\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Title />\n        <SearchBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}